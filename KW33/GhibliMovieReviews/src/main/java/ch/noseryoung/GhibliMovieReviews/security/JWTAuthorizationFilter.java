package ch.noseryoung.GhibliMovieReviews.security;

import ch.noseryoung.GhibliMovieReviews.domain.users.UserService;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
import java.util.UUID;

public class JWTAuthorizationFilter extends OncePerRequestFilter {

    private final UserService userService;
    private final JwtProperties jwtProperties;

    public JWTAuthorizationFilter(UserService userService, JwtProperties jwtProperties) {
        this.userService = userService;
        this.jwtProperties = jwtProperties;
    }

    private String resolveToken(String token) {
        if (token != null && token.startsWith("Bearer")) { // Bearer token is generated by the server in response to a login request
            byte[] keyBytes = Decoders.BASE64.decode(jwtProperties.getSecret());
            return Jwts.parserBuilder()
                    .setSigningKey(Keys.hmacShaKeyFor(keyBytes))
                    .build()
                    .parseClaimsJws(token.replace("Bearer ", ""))
                    .getBody()
                    .getSubject();
        } else {
            return null;
        }
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String authToken = request.getHeader(HttpHeaders.AUTHORIZATION);
            //parsing it as an Integer
            int userId = Integer.parseInt(resolveToken(authToken));
            // Load user details using the user ID
            UserDetails userDetails = new UserService.UserDetailsImpl(userService.loadUserById(userId));

            // Set the authentication in the security context
            SecurityContextHolder.getContext()
                        .setAuthentication(new UsernamePasswordAuthenticationToken(userDetails, null,
                                userDetails.getAuthorities()));

        }
        catch (RuntimeException e) {
            SecurityContextHolder.clearContext();
        }
        filterChain.doFilter(request, response);
    }
}